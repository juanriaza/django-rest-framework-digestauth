# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[lib]
python_package_namespace = rest_framework_digestauth
python_package_folder = rest_framework_digestauth
top_package_folder = rest_framework_digestauth
default_python_version_short = py36


[tox]
envlist = py{27,36}-django{18,19,110,111},py36-django{20,21}


[coverage]
prepare_commands =
    /usr/bin/env bash -c '[ -f {toxinidir}/.coveragerc ] || printf "[run]\nbranch=True" > {toxinidir}/.coveragerc'


[testenv]
deps =
    pyhamcrest
    mock
    coverage
    py27: pylint<2
    !py27: pylint
    flake8
    pytest
    pytest-cov
    pytest-timeout
    pytest-django
    django21: django>=2.1,<2.2
    django20: django>=2.0,<2.1
    django111: django>=1.11,<1.12
    django110: django>=1.10,<1.11
    django19: django>=1.9,<1.10
    django18: django>=1.8,<1.9
    django{18,19}: djangorestframework<3.7
install_command = pip install {opts} {packages}
# This is the main testing command, intended for comprehensive testing.
# It's supposed to fail (exit code != 0) if tests don't pass
commands =
    pytest {posargs:\
    {envsitepackagesdir}/{[lib]python_package_folder} \
    test \
    --durations=10}


[testenv:check_code]
envdir = {toxworkdir}/{[lib]default_python_version_short}
# This is a command performing differents check of the code,
#   and saving results in files for further processing (visualization, for inst.).
# It is designed to ignore errors, and should not be used for testing per se.
commands =
    {[coverage]prepare_commands}
    pytest \
    {[lib]python_package_folder} \
    test \
    --doctest-modules \
    --junit-xml={toxinidir}nosetests.xml \
    --cov={[lib]python_package_namespace} \
    --cov-report xml:{toxinidir}/coverage.xml
    pylint -f parseable --files-output=y {[lib]top_package_folder}
    flake8 --output-file=flake8.txt {[lib]top_package_folder}
ignore_errors = True
ignore_outcome = True


[testenv:doctests]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    pytest \
    {[lib]python_package_folder} \
    --doctest-modules \
    --durations=10


[testenv:test_fast]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    pytest -v \
    test \
    -m "not slow" \
    --durations=10
ignore_outcome = True


[testenv:test_slow]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    pytest \
    -m slow \
    --durations=0
ignore_outcome = True


[testenv:pylint]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    pylint {[lib]top_package_folder}
ignore_outcome = True


[testenv:flake8]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    flake8 {[lib]top_package_folder}
ignore_outcome = True


[testenv:coverage_html]
envdir = {toxworkdir}/{[lib]default_python_version_short}
commands =
    {[coverage]prepare_commands}
    pytest \
    {[lib]python_package_folder} \
    test \
    --doctest-modules \
    --cov={[lib]python_package_namespace} \
    --cov-report html:{toxinidir}/coverage_html
ignore_outcome = True


[flake8]
max-line-length = 120

